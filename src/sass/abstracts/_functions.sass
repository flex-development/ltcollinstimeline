/// ----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
/// ----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path)
  @return url($base + $type + $path)

/// Clamp `$value` between `$min` and `$max`.
/// @param {Number} $value - Value to clamp between `$min` and `$max`
/// @param {Number} $min   - Minimum value
/// @param {Number} $max   - Maximum value
/// @throws All parameters must be numbers for `clamp`.
/// @return {Number | Null}
@function clamp($value, $min, $max)
  $invalid_value: type-of($value) != 'number'
  $invalid_min: type-of($min) != 'number'
  $invalid_max: type-of($max) != 'number'

  @if $invalid_value or $invalid_min or $invalid_max
    @error 'All parameters must be numbers for `clamp`.'

  @return if($value > $max, $max, if($value < $min, $min, $value))

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url)
  @return asset($base, 'fonts/', $path)

/// Returns URL to an icon based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function icon($path, $base: $base-url)
  @return asset($base, 'icons/', $path)

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url)
  @return asset($base, 'images/', $path)

/// Convert pixels to em
/// @access private
/// @param {Number} $value - Value to convert
/// @return {Number} #{$value / 16px}em
@function value-to-em($value)
  @if unitless($value)
    $value: $value * 1px

  @return #{$value / 16px}em

/// Convert pixels to rems
/// @access private
/// @param {Number} $value - Value to convert
/// @return {Number} #{$value / 16px}rem
@function value-to-rem($value)
  @if unitless($value)
    $value: $value * 1px

  @return #{$value / 16px}rem

/// Converts $value to px, then rems or ems.
/// @param {Number} $value - Value to convert
/// @param {String} $unit [rem] - Unit to convert to
/// @throws $unit must be 'rem' or 'em'
/// @return {Number}
@function size($value, $unit: 'rem')
  @if $unit == 'em'
    @return value-to-em($value)

  @return value-to-rem($value)
